#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

working_dir="$(dirname ${0})"

source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"


if [[ -z ${1+x} ]]; then
    message_error "Backup filename is not specified yet its is a required parameter. Maker sure you provide one and try again."
    exit 1
fi

backup_filename="${BACKUP_DIR_PATH}/${1}"


if [[ ! -f "${backup_filename}" ]]; then
    message_error "No Backup with specified backup filename was found. Check out the 'backup' maintenance script output to see if there is one and try again."
    exit 1
fi

message_welcome "Restoring the '${POSTGRES_DB}' database from the '${backup_filename}' backup..."

if [[ "${POSTGRES_USER}" == "postgres" ]]; then
    message_error "Restoring as 'postgres' user is not allowed. Assigin 'POSTGRES_USER' env with another one try again. "
    exit 1
fi


export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"
export PGDATABASE="${POSTGRES_DB}"

psql -v ON_ERROR_STOP=1 -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '${PGDATABASE}' AND pid <> pg_backend_pid();"

message_info "Dropping the databse..."

dropdb "${PGDATABASE}"

message_info "Creating a new database..."

createdb --owner="${POSTGRES_USER}"

message_info "Applying the backup to the new database..."

gunzip -c "${backup_filename}" | psql "${POSTGRES_DB}"

message_success "The '${POSTGRES_DB}' database has been restored successfully from the '${backup_filename}' backup"